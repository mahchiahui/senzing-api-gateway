---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'ALB Authentication | Cognito | cloudonaut.io'
Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
  SubnetIds:
    Type: 'List<AWS::EC2::Subnet::Id>'
  CertificateArn:
    Type: 'String' # the ARN of a ACM certificate valid for the custom domain name
Resources:
  LoadBalancerSecurityGroup: # Security Group for Load Balancer allows incoming HTTPS requests
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Load Balancer'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: '0.0.0.0/0'
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref SubnetIds
      Type: application
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
      - CertificateArn: !Ref CertificateArn
      DefaultActions: # 1. Authenticate against Cognito User Pool
      - Type: 'authenticate-cognito'
        AuthenticateCognitoConfig:
          OnUnauthenticatedRequest: 'authenticate' # Redirect unauthenticated clients to Cognito login page
          Scope: 'openid'
          UserPoolArn: !GetAtt 'UserPool.Arn'
          UserPoolClientId: !Ref UserPoolClient
          UserPoolDomain: !Ref UserPoolDomain
        Order: 1
      - Type: forward # 2. Forward request to target group (e.g., EC2 instances)
        TargetGroupArn: !Ref TargetGroup
        Order: 2
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: 'HTTPS'
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: false
      Name: MyTargets
      TargetType: lambda
      Targets:
      - Id: !GetAtt [ MyLambdaFunction, Arn ]
  MyLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: !Sub |
          import json

          def handler(event, context):
            response = {
              "statusCode": 200,
              "statusDescription": "200 OK",
              "isBase64Encoded": False,
              "headers": {
                "Content-Type": "text/html; charset=utf-8"
              }
            }

            response['body'] = """<html>
            <head>
            <title>Hello World!</title>
            <style>
            html, body {
              margin: 0; padding: 0;
              font-family: arial; font-weight: 700; font-size: 3em;
              text-align: center;
            }
            </style>
            </head>
            <body>
            <p>Hello World from Lambda</p>
            </body>
            </html>"""
            return response
      Runtime: "python3.6"
      Timeout: "25"
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
  MyLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true # Disable self-registration
        InviteMessageTemplate:
          EmailSubject: !Sub '${AWS::StackName}: temporary password'
          EmailMessage: 'Use the username {username} and the temporary password {####} to log in for the first time.'
          SMSMessage: 'Use the username {username} and the temporary password {####} to log in for the first time.'
      AutoVerifiedAttributes:
      - email
      UsernameAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 16
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
          TemporaryPasswordValidityDays: 21
  UserPoolDomain: # Provides Cognito Login Page
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Select [2, !Split ['/', !Ref 'AWS::StackId']] # Generates a unique domain name
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      AllowedOAuthFlows:
      - code # Required for ALB authentication
      AllowedOAuthFlowsUserPoolClient: true # Required for ALB authentication
      AllowedOAuthScopes:
      - email
      - openid
      - profile
      - aws.cognito.signin.user.admin
      CallbackURLs:
      - !Sub https://${LoadBalancer.DNSName}/oauth2/idpresponse # Redirects to the ALB
      GenerateSecret: true
      SupportedIdentityProviders: # Optional: add providers for identity federation
      - COGNITO
      UserPoolId: !Ref UserPool
Outputs:
  Endpoint:
    Description: Loadbalancer Endpoint
    Value: !Sub https://${LoadBalancer.DNSName}
